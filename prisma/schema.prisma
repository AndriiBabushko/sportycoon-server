generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.png"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  COACH
  USER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum FitnessLevel {
  NEWBIE
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Goal {
  BUILD_STRENGTH
  LOSE_WEIGHT
  BUILD_MUSCLE
  IMPROVE_HEALTH
  LEARN_TECHNIQUES
}

enum HeightUnit {
  CM
  IN
}

enum WeightUnit {
  KG
  LBS
}

model Avatar {
  id         String   @id @default(uuid()) @db.Uuid
  public_id  String
  url        String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String   @unique @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Performance {
  id           String @id @default(uuid()) @db.Uuid
  max_pull_ups Int
  max_push_ups Int
  max_squats   Int
  max_dips     Int
  user         User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String @unique @db.Uuid
}

model Height {
  id      String     @id @default(uuid()) @db.Uuid
  value   Float
  unit    HeightUnit
  user    User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String     @unique @db.Uuid
}

model Weight {
  id      String     @id @default(uuid()) @db.Uuid
  value   Float
  unit    WeightUnit
  user    User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String     @unique @db.Uuid
}

model GoalWeight {
  id      String     @id @default(uuid()) @db.Uuid
  value   Float
  unit    WeightUnit
  user    User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String     @unique @db.Uuid
}

model User {
  id            String        @id @default(uuid()) @db.Uuid
  email         String?       @unique
  username      String?       @unique
  full_name     String?
  gender        Gender?
  height        Height?
  weight        Weight?
  goal_weight   GoalWeight?
  fitness_level FitnessLevel?
  goals         Goal[]
  performance   Performance?
  password      String?
  role          Role          @default(USER)
  avatar        Avatar?
  shop_cart     ShopCart?
  wishlist      ShopItem[]
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  google_id     String?       @unique
  spotify_id    String?       @unique
}

model ShopCart {
  id         String         @id @default(uuid()) @db.Uuid
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  items      ShopCartItem[]
  user       User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String         @unique @db.Uuid
}

model ShopCategory {
  id            String         @id @default(uuid()) @db.Uuid
  name          String
  description   String
  items         ShopItem[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  subcategories ShopCategory[] @relation("CategoryParent")
  parent        ShopCategory?  @relation("CategoryParent", fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id     String?        @db.Uuid
}

model ShopItem {
  id              String             @id @default(uuid()) @db.Uuid
  name            String
  description     String
  price           Float
  preview         String
  images          String[]
  bundle_discount Float?
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  cart_items      ShopCartItem[]
  modifiers       ShopItemModifier[]
  user            User?              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         String?            @db.Uuid
  category        ShopCategory       @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id     String             @db.Uuid
}

model ShopCartItem {
  id           String   @id @default(uuid()) @db.Uuid
  quantity     Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  shop_cart    ShopCart @relation(fields: [shop_cart_id], references: [id], onDelete: Cascade)
  shop_cart_id String   @db.Uuid
  shop_item    ShopItem @relation(fields: [shop_item_id], references: [id], onDelete: Cascade)
  shop_item_id String   @db.Uuid
}

model Modifier {
  id         String           @id @default(uuid()) @db.Uuid
  name       String
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  options    ModifierOption[]
}

model ModifierOption {
  id                  String             @id @default(uuid()) @db.Uuid
  value               String
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  shop_item_modifiers ShopItemModifier[]
  modifier            Modifier           @relation(fields: [modifier_id], references: [id], onDelete: Cascade)
  modifier_id         String             @db.Uuid
}

model ShopItemModifier {
  id                 String         @id @default(uuid()) @db.Uuid
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  shop_item          ShopItem       @relation(fields: [shop_item_id], references: [id], onDelete: Cascade)
  shop_item_id       String         @db.Uuid
  modifier_option    ModifierOption @relation(fields: [modifier_option_id], references: [id], onDelete: Cascade)
  modifier_option_id String         @db.Uuid
}
