generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  manager
  coach
  user
}

enum Gender {
  male
  female
  other
}

enum FitnessLevel {
  newbie
  beginner
  intermediate
  advanced
}

enum Goal {
  build_strength
  lose_weight
  build_muscle
  improve_health
  learn_techniques
}

enum HeightUnit {
  cm
  in
}

enum WeightUnit {
  kg
  lbs
}

model Avatar {
  id         String   @id @default(uuid()) @db.Uuid
  public_id  String
  url        String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String   @unique @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Performance {
  id         String @id @default(uuid()) @db.Uuid
  public_id  String
  maxPullUps Int
  maxPushUps Int
  maxSquats  Int
  maxDips    Int
  user       User   @relation(fields: [user_id], references: [id])
  user_id    String @unique @db.Uuid
}

model User {
  id                String        @id @default(uuid()) @db.Uuid
  email             String?       @unique
  username          String?       @unique
  gender            Gender?
  height_value      Float?
  height_unit       HeightUnit?
  weight_value      Float?
  weight_unit       WeightUnit?
  goal_weight_value Float?
  goal_weight_unit  WeightUnit?
  fitness_level     FitnessLevel?
  goals             Goal[]
  performance       Performance?
  password          String?
  role              Role          @default(user)
  avatar            Avatar?
  shop_cart         ShopCart?
  wishlist          ShopItem[]
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  google_id         String?       @unique
  spotify_id        String?       @unique
}

model ShopCart {
  id         String         @id @default(uuid()) @db.Uuid
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  items      ShopCartItem[]
  user       User           @relation(fields: [user_id], references: [id])
  user_id    String         @unique @db.Uuid
}

model ShopCategory {
  id            String         @id @default(uuid()) @db.Uuid
  name          String
  description   String
  items         ShopItem[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  subcategories ShopCategory[] @relation("CategoryParent")
  parent        ShopCategory?  @relation("CategoryParent", fields: [parent_id], references: [id])
  parent_id     String?        @db.Uuid
}

model ShopItem {
  id              String             @id @default(uuid()) @db.Uuid
  name            String
  description     String
  price           Float
  preview         String
  images          String[]
  bundle_discount Float?
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  cart_items      ShopCartItem[]
  modifiers       ShopItemModifier[]
  user            User?              @relation(fields: [user_id], references: [id])
  user_id         String?            @db.Uuid
  category        ShopCategory       @relation(fields: [category_id], references: [id])
  category_id     String             @db.Uuid
}

model ShopCartItem {
  id           String   @id @default(uuid()) @db.Uuid
  quantity     Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  shop_cart    ShopCart @relation(fields: [shop_cart_id], references: [id])
  shop_cart_id String   @db.Uuid
  shop_item    ShopItem @relation(fields: [shop_item_id], references: [id])
  shop_item_id String   @db.Uuid
}

model Modifier {
  id         String           @id @default(uuid()) @db.Uuid
  name       String
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  options    ModifierOption[]
}

model ModifierOption {
  id                  String             @id @default(uuid()) @db.Uuid
  value               String
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  shop_item_modifiers ShopItemModifier[]
  modifier            Modifier           @relation(fields: [modifier_id], references: [id])
  modifier_id         String             @db.Uuid
}

model ShopItemModifier {
  id                 String         @id @default(uuid()) @db.Uuid
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  shop_item          ShopItem       @relation(fields: [shop_item_id], references: [id])
  shop_item_id       String         @db.Uuid
  modifier_option    ModifierOption @relation(fields: [modifier_option_id], references: [id])
  modifier_option_id String         @db.Uuid
}
